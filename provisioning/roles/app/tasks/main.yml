---
- name: Create group
  group: >
    name={{app_group}} gid={{app_gid}} state=present

- name: Create user
  user: >
    name={{app_user}} uid={{app_uid}} group={{app_group}} 
    home={{app_home}} createhome=yes shell=/bin/false state=present

- name: Create folders
  file: >
    path={{item}} owner={{app_user}} group={{app_group}} 
    mode=1700 state=directory
  with_items:
    - "{{app_home}}"
    - "{{app_home}}/gems"
    - "{{app_repo}}"

###
### Running stuff as {{myapp_user}} whenever permissions need to be preserved
###

- name: Clone application repository
  git: >
    repo={{app_repo_url}} dest={{app_repo}} 
    version=master accept_hostkey=yes force=yes
  sudo_user: "{{app_user}}"

  # For private apps, copy the key file and specify "key_file" in the git task
  # Use git-crypt, ansible-vault or anything that you want
  # But don't commit secret files unencrypted, even in private repositories

- name: Copy dotEnv for this server
  copy: >
    src=.env dest={{app_repo}}/.env owner={{app_user}} group={{app_group}} mode=0600

- name: Symlink persistent folders
  file: state=link force=yes src={{item.src}} dest={{item.dest}}
  with_items:
    - { src: "{{app_home}}/gems", dest: "{{app_repo}}/vendor/bundle" }

- name: Bundle install in deployment mode
  shell: >
    bundle install --deployment --clean --without development test
  args:
    chdir: "{{app_repo}}"
  sudo_user: "{{app_user}}"

### At this point, you may want to run any custom tasks
### (like db:migrate, assets:precompile, etc)
### Just like the bundle install above

- name: Create system service
  shell: >
    PATH=$(pwd):$PATH bundle exec foreman export -a {{app_name}} -u {{app_user}} upstart /etc/init/
  args:
    chdir: "{{app_repo}}"

- name: Restart service and enable at boot
  service: name={{app_name}} state=restarted enabled=yes
